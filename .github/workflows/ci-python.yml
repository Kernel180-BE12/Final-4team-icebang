name: CI (Python/FastAPI)

on:
  push:
    branches: [feature/python-ci, main]
    paths:
      - "apps/pre-processing-service/**"
      - ".github/workflows/ci-python.yml"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop, release/**]
    paths:
      - "apps/pre-processing-service/**"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_DIR: apps/pre-processing-service
  PY_VER: "3.11"
  POETRY_VERSION: "2.1.3"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_NO_INTERACTION: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_ROOT_USER_ACTION: "ignore"

jobs:
  setup:
    name: Prepare (Checkout / Python / Poetry / Cache)
    runs-on: ubuntu-latest
    outputs:
      venv-cache-hit: ${{ steps.venv-cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          cache: "pip"

      - name: Install Poetry (${{ env.POETRY_VERSION }})
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # ✅ Poetry/Pip 캐시도 잡아주기 (설치속도 단축)
      - name: Cache Poetry cache
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetrycache-${{ runner.os }}-${{ env.PY_VER }}-${{ hashFiles(format('{0}/poetry.lock', env.APP_DIR)) }}
          restore-keys: |
            poetrycache-${{ runner.os }}-${{ env.PY_VER }}-

      - name: Cache venv
        id: venv-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.APP_DIR }}/.venv
          key: venv-${{ runner.os }}-${{ env.PY_VER }}-${{ hashFiles(format('{0}/poetry.lock', env.APP_DIR)) }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PY_VER }}-

      - name: Install deps (poetry)
        if: steps.venv-cache.outputs.cache-hit != 'true'
        working-directory: ${{ env.APP_DIR }}
        run: poetry install --no-root

      # 다른 잡들이 .venv를 그대로 쓰도록 업로드
      - name: Upload venv
        uses: actions/upload-artifact@v4
        with:
          name: venv-${{ github.sha }}
          path: ${{ env.APP_DIR }}/.venv

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    defaults:
      run:
        working-directory: ${{ env.APP_DIR }}
    steps:
      - uses: actions/checkout@v4

      # setup에서 만든 venv 그대로 다운로드 → 즉시 사용
      - name: Download venv
        uses: actions/download-artifact@v4
        with:
          name: venv-${{ github.sha }}
          path: ${{ env.APP_DIR }}/.venv

      - name: Install Poetry (shim)
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Black (check)
        run: poetry run black --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [setup, lint]
    defaults:
      run:
        working-directory: ${{ env.APP_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Download venv
        uses: actions/download-artifact@v4
        with:
          name: venv-${{ github.sha }}
          path: ${{ env.APP_DIR }}/.venv

      - name: Install Poetry (shim)
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Pytest
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: test_user
          DB_PASS: test_pass
          DB_NAME: test_db
          ENV_NAME: test
          PYTHONWARNINGS: default
        run: |
          poetry run pytest -q --maxfail=1 --disable-warnings --durations=10 --junitxml=pytest-report.xml

      - name: Upload test report (XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: ${{ env.APP_DIR }}/pytest-report.xml

      - name: Publish test summary
        if: always()
        run: |
          echo "### Pytest finished" >> $GITHUB_STEP_SUMMARY
          echo "\n- Durations: top 10 slow tests" >> $GITHUB_STEP_SUMMARY
          grep -n "seconds" -n pytest-report.xml | head -n 20 || true

  build-and-push-docker:
    name: Build & Push Docker (GHCR)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feature/python-ci' && github.event_name == 'push'
    needs: test
    permissions:
      contents: read
      packages: write
    env:
      # 캐시 충돌 줄이기 위해 scope 분리
      DOCKER_CACHE_SCOPE: pre-processing-service
    steps:
      - uses: actions/checkout@v4

      - name: Set repo lowercase
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO_LC }}/pre-processing-service
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ./apps/pre-processing-service
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PY_VER=${{ env.PY_VER }}
          cache-from: type=gha,scope=${{ env.DOCKER_CACHE_SCOPE }}
          cache-to: type=gha,scope=${{ env.DOCKER_CACHE_SCOPE }},mode=max

      - name: Show image history
        run: docker history $(echo "${{ steps.meta.outputs.tags }}" | head -n 1) --human --no-trunc
