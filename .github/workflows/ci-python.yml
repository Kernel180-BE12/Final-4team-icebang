name: CI (Python/FastAPI)

on:
  push:
    branches:
      - feature/python-ci
      - main
    paths:
      - "apps/pre-processing-service/**" # Python 서비스 경로
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - develop
      - release/**
    paths:
      - "apps/pre-processing-service/**" # Python 서비스 경로

permissions:
  contents: read
  packages: write
  security-events: write
  checks: write
  pull-requests: write

jobs:
  lint:
    if: github.event.pull_request.draft == false
    name: Lint & Format Check
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: apps/pre-processing-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: apps/pre-processing-service/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('apps/pre-processing-service/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run Formatter Check (Black)
        run: poetry run black --check .

      # - name: Run Linter (Ruff)
      #   run: poetry run ruff check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    defaults:
      run:
        working-directory: apps/pre-processing-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: apps/pre-processing-service/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('apps/pre-processing-service/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run tests with Pytest
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: test_user
          DB_PASS: test_pass
          DB_NAME: test_db
          ENV_NAME: test
        run: poetry run pytest

  build-and-push-docker:
    name: Build Docker Image and push to registry
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs:
      - test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repo lowercase
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/pre-processing-service # Dockerfile이 있는 경로
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LC }}/pre-processing-service:latest
            ghcr.io/${{ env.REPO_LC }}/pre-processing-service:${{ github.sha }}

      - name: Analyze image layers
        run: |
          echo "=== Image Layer Analysis ==="
          docker history ghcr.io/${{ env.REPO_LC }}/pre-processing-service:latest --human --no-trunc
