name: CI (Java)

on:
  push:
    tags:
      - 'user-service-v*'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - develop
      - release/**
    paths:
      - "apps/user-service/**"
      - ".github/workflows/ci-java.yml"

permissions:
  contents: read
  packages: write
  security-events: write
  checks: write
  pull-requests: write
  pages: write      # GitHub Pages 배포
  id-token: write   # GitHub Pages 배포

jobs:
  spotless-check:
    if: github.event.pull_request.draft == false
    name: Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for Java-related changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            java-source:
              - 'apps/user-service/src/main/**'
              - 'apps/user-service/build.gradle'
              - 'apps/user-service/gradle.properties'
              - 'apps/user-service/gradle/**'
            unit-tests:
              - 'apps/user-service/src/test/**/unit/**'
            integration-tests:
              - 'apps/user-service/src/test/**/integration/**'
            e2e-tests:
              - 'apps/user-service/src/test/**/e2e/**'

      - name: Set up JDK 21
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for Gradle wrapper
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        run: chmod +x ./gradlew
        working-directory: apps/user-service

      - name: Run Spotless Check
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        run: ./gradlew spotlessCheck
        working-directory: apps/user-service

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: spotless-check
    strategy:
      matrix:
        java-version: ["21"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for Java-related changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            java-source:
              - 'apps/user-service/src/main/**'
              - 'apps/user-service/build.gradle'
              - 'apps/user-service/gradle.properties'
              - 'apps/user-service/gradle/**'
            unit-tests:
              - 'apps/user-service/src/test/**/unit/**'
            integration-tests:
              - 'apps/user-service/src/test/**/integration/**'
            e2e-tests:
              - 'apps/user-service/src/test/**/e2e/**'

      - name: Set up JDK ${{ matrix.java-version }}
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: '${{ matrix.java-version }}'
          distribution: 'temurin'

      - name: Setup Gradle
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for Gradle wrapper
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        run: chmod +x ./gradlew
        working-directory: apps/user-service

      - name: Run Gradle Build
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        run: ./gradlew build -x test
        working-directory: apps/user-service

      - name: Run Unit Tests
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true'
        run: ./gradlew unitTest
        working-directory: apps/user-service

      - name: Run Integration Tests
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.integration-tests == 'true'
        run: ./gradlew integrationTest
        working-directory: apps/user-service

      - name: Run E2E Tests
        if: (steps.changes.outputs.java-source == 'true' || steps.changes.outputs.e2e-tests == 'true') && (github.base_ref == 'main' || startsWith(github.ref, 'refs/tags/'))
        run: ./gradlew e2eTest
        working-directory: apps/user-service

      - name: Generate Javadoc
        if: steps.changes.outputs.java-source == 'true' || steps.changes.outputs.unit-tests == 'true' || steps.changes.outputs.integration-tests == 'true' || steps.changes.outputs.e2e-tests == 'true'
        run: ./gradlew javadoc
        working-directory: apps/user-service

      - name: Generate OpenAPI
        if: (steps.changes.outputs.java-source == 'true' || steps.changes.outputs.integration-tests == 'true') && (github.base_ref == 'main' || startsWith(github.ref, 'refs/tags/'))
        run: ./gradlew openapi3
        working-directory: apps/user-service

      - name: Upload build artifacts
        if: matrix.java-version == '21' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
          path: apps/user-service/build/libs/

      - name: Upload OpenAPI spec artifacts
        if: matrix.java-version == '21' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec-${{ github.run_id }}-${{ github.run_attempt }}
          path: apps/user-service/build/api-spec/

  set-image-tag:
    name: Set IMAGE_TAG
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/user-service-v')
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Extract version from tag
        id: extract-tag
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/user-service-}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Extracted IMAGE_TAG: $IMAGE_TAG"

  docker:
    name: Build Spring Boot Docker Image and push
    runs-on: ubuntu-latest
    needs:
      - build
      - set-image-tag
    if: startsWith(github.ref, 'refs/tags/user-service-v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts (JAR)
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
          path: apps/user-service/build/libs/

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repo lowercase
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/user-service
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LC }}/user-service:${{ needs.set-image-tag.outputs.image-tag }}
            ghcr.io/${{ env.REPO_LC }}/user-service:latest

      - name: Analyze image layers
        run: |
          echo "=== Image Layer Analysis ==="
          docker history ghcr.io/${{ env.REPO_LC }}/user-service:${{ needs.set-image-tag.outputs.image-tag }} --human --no-trunc

  swagger-docs:
    name: Deploy Swagger Documentation
    runs-on: ubuntu-latest
    needs:
      - build
      - set-image-tag
    if: startsWith(github.ref, 'refs/tags/user-service-v')

    permissions:
      contents: read        # 리포지토리 읽기
      pages: write         # GitHub Pages 쓰기
      id-token: write      # OIDC 토큰
      actions: read        # Actions 읽기

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download OpenAPI spec artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-spec-${{ github.run_id }}-${{ github.run_attempt }}
          path: ./openapi-spec

      - name: Check OpenAPI spec file exists
        id: check-openapi
        run: |
          if [ -f "./openapi-spec/openapi3.yaml" ]; then
            echo "openapi_exists=true" >> $GITHUB_OUTPUT
            echo "✅ OpenAPI spec file found"
            ls -la ./openapi-spec/
          else
            echo "openapi_exists=false" >> $GITHUB_OUTPUT
            echo "❌ OpenAPI spec file not found"
            echo "Available files:"
            ls -la ./openapi-spec/ || echo "No openapi-spec directory found"
            find . -name "*.yaml" -o -name "*.yml" -o -name "*.json" | grep -i openapi || echo "No OpenAPI files found"
          fi

      - name: Generate Swagger UI
        if: steps.check-openapi.outputs.openapi_exists == 'true'
        uses: Legion2/swagger-ui-action@v1
        with:
          output: user-service-swagger-ui-${{ needs.set-image-tag.outputs.image-tag }}
          spec-file: openapi-spec/openapi3.yaml
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        if: steps.check-openapi.outputs.openapi_exists == 'true'
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.PERSONAL_TOKEN }}
          publish_dir: ./user-service-swagger-ui-${{ needs.set-image-tag.outputs.image-tag }}
          destination_dir: user-service/${{ needs.set-image-tag.outputs.image-tag }}

      - name: Skip deployment notice
        if: steps.check-openapi.outputs.openapi_exists == 'false'
        run: |
          echo "⏭️ Skipping Swagger documentation deployment"
          echo "Reason: OpenAPI spec file not found at ./openapi-spec/openapi3.yaml"
          echo "Please check your build configuration to ensure OpenAPI spec is generated"