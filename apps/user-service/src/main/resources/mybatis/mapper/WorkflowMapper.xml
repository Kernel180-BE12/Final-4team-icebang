<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="site.icebang.domain.workflow.mapper.WorkflowMapper">
    <select id="selectWorkflowList" parameterType="site.icebang.common.dto.PageParams"
            resultType="site.icebang.domain.workflow.dto.WorkflowCardDto">
        SELECT
            w.id,
            w.name,
            w.description,
            w.is_enabled as isEnabled,
            u.name as createdBy,
            w.created_at as createdAt
        FROM workflow w
        LEFT JOIN user u ON w.created_by = u.id
        WHERE 1=1
        ORDER BY w.created_at DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="selectWorkflowCount" parameterType="site.icebang.common.dto.PageParams"
            resultType="int">
        SELECT COUNT(*)
        FROM workflow w
        WHERE 1=1
    </select>

    <select id="selectWorkflowById" parameterType="java.math.BigInteger"
            resultType="site.icebang.domain.workflow.dto.WorkflowCardDto">
        SELECT
            w.id,
            w.name,
            w.description,
            w.is_enabled as isEnabled,
            u.name as createdBy,
            w.created_at as createdAt
        FROM workflow w
        LEFT JOIN user u ON w.created_by = u.id
        WHERE w.id = #{id}
    </select>

    <resultMap id="WorkflowDetailMap" type="site.icebang.domain.workflow.dto.WorkflowDetailCardDto">
        <id     property="id"            column="id"/>
        <result property="name"          column="name"/>
        <result property="description"   column="description"/>
        <result property="isEnabled"     column="isEnabled"/>
        <result property="defaultConfig" column="defaultConfig"/>
        <result property="createdBy"     column="createdBy"/>
        <result property="createdAt"     column="createdAt" javaType="java.time.Instant" jdbcType="TIMESTAMP" typeHandler="site.icebang.global.config.mybatis.typehandler.InstantTypeHandler"/>
        <result property="updatedBy"     column="updatedBy"/>
        <result property="updatedAt"     column="updatedAt" javaType="java.time.Instant" jdbcType="TIMESTAMP" typeHandler="site.icebang.global.config.mybatis.typehandler.InstantTypeHandler"/>
    </resultMap>

    <!-- 스케줄 정보 매핑 -->
    <resultMap id="ScheduleMap" type="site.icebang.domain.workflow.dto.ScheduleDto">
        <id     property="id"            column="id"/>
        <result property="cronExpression" column="cronExpression"/>
        <result property="isActive"       column="isActive"/>
        <result property="lastRunStatus"  column="lastRunStatus"/>
        <result property="lastRunAt"      column="lastRunAt" javaType="java.time.Instant" jdbcType="TIMESTAMP" typeHandler="site.icebang.global.config.mybatis.typehandler.InstantTypeHandler"/>
        <result property="scheduleText"   column="scheduleText"/>
        <result property="createdAt"      column="createdAt" javaType="java.time.Instant" jdbcType="TIMESTAMP" typeHandler="site.icebang.global.config.mybatis.typehandler.InstantTypeHandler"/>
    </resultMap>

    <!-- 워크플로우 기본 정보 조회 -->
    <select id="selectWorkflowDetailById" parameterType="BigInteger"
            resultMap="WorkflowDetailMap">
        SELECT
            w.id,
            w.name,
            w.description,
            w.is_enabled        AS isEnabled,
            w.default_config    AS defaultConfig,
            creator.name        AS createdBy,
            w.created_at        AS createdAt,
            updater.name        AS updatedBy,
            w.updated_at        AS updatedAt
        FROM workflow w
                 LEFT JOIN `user` creator ON w.created_by = creator.id
                 LEFT JOIN `user` updater ON w.updated_by = updater.id
        WHERE w.id = #{workflowId}
    </select>

    <!-- 워크플로우별 스케줄 목록 조회 -->
    <select id="selectSchedulesByWorkflowId" parameterType="BigInteger"
            resultMap="ScheduleMap">
        SELECT
            id,
            cron_expression     AS cronExpression,
            is_active          AS isActive,
            last_run_status    AS lastRunStatus,
            last_run_at        AS lastRunAt,
            schedule_text      AS scheduleText,
            created_at         AS createdAt
        FROM schedule
        WHERE workflow_id = #{workflowId}
        ORDER BY id
    </select>

    <select id="selectWorkflowWithJobsAndTasks" parameterType="BigInteger"
            resultType="java.util.Map">
        SELECT
            w.id as workflow_id,
            wj.execution_order as job_execution_order,
            j.id as job_id,
            j.name as job_name,
            j.description as job_description,
            j.is_enabled as job_enabled,
            -- Job별 Task 정보를 JSON 배열로 그룹화
            JSON_ARRAYAGG(
                    JSON_OBJECT(
                            'task_id', t.id,
                            'task_name', t.name,
                            'task_type', t.type,
                            'task_parameters', t.parameters,
                            'execution_order', jt.execution_order
                    ) ORDER BY jt.execution_order
            ) as tasks
        FROM workflow w
                 LEFT JOIN workflow_job wj ON w.id = wj.workflow_id
                 LEFT JOIN job j ON wj.job_id = j.id
                 LEFT JOIN job_task jt ON j.id = jt.job_id
                 LEFT JOIN task t ON jt.task_id = t.id
        WHERE w.id = #{workflowId}
          AND t.id IS NOT NULL  -- Task가 있는 Job만 조회
        GROUP BY
            w.id, w.name, w.description, w.is_enabled, w.default_config,
            wj.execution_order, j.id, j.name, j.description, j.is_enabled
        ORDER BY wj.execution_order
    </select>

    <insert id="insertWorkflow" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO workflow (
            name,
            description,
            is_enabled,
            created_by,
            created_at,
            default_config
        ) VALUES (
                     #{dto.name},
                     #{dto.description},
                     #{dto.isEnabled},
                     #{createdBy},
                     NOW(),
                     #{dto.defaultConfigJson}
                 )
    </insert>

    <!-- 워크플로우 이름 중복 체크 -->
    <select id="existsByName" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM workflow
        WHERE name = #{name}
    </select>

    <!-- Job 생성 -->
    <insert id="insertDefaultJobs" parameterType="map" useGeneratedKeys="true" keyProperty="jobIds">
        <selectKey keyProperty="jobIds" resultType="java.util.List" order="AFTER">
            SELECT LAST_INSERT_ID() as id
        </selectKey>
        INSERT INTO job (name, description, created_by, created_at) VALUES
        ('상품 분석', '키워드 검색, 상품 크롤링 및 유사도 분석 작업', #{createdBy}, NOW()),
        ('블로그 콘텐츠 생성', '분석 데이터를 기반으로 RAG 콘텐츠 생성 및 발행 작업', #{createdBy}, NOW())
    </insert>

    <!-- Workflow-Job 연결 -->
    <insert id="insertWorkflowJob" parameterType="map">
        INSERT INTO workflow_job (workflow_id, job_id, execution_order) VALUES
                                                                            (#{workflowId}, #{job1Id}, 1),
                                                                            (#{workflowId}, #{job2Id}, 2)
    </insert>

    <!-- Job-Task 연결 -->
    <insert id="insertJobTask" parameterType="map">
        INSERT INTO job_task (job_id, task_id, execution_order) VALUES
        <!-- Job 1: 상품 분석 (Task 1~6) -->
        (#{job1Id}, 1, 1),
        (#{job1Id}, 2, 2),
        (#{job1Id}, 3, 3),
        (#{job1Id}, 4, 4),
        (#{job1Id}, 5, 5),
        (#{job1Id}, 6, 6),
        <!-- Job 2: 블로그 콘텐츠 생성 (Task 7~8) -->
        (#{job2Id}, 7, 1),
        (#{job2Id}, 8, 2)
    </insert>
</mapper>