<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<!--
ResultMap 정의: DB 컬럼을 Java 객체 필드로 자동 매핑
기본 조회: 단일 테이블 조회 (빠른 성능)
상세 조회: JOIN을 통한 조직 정보 포함 조회
권한 조회: 복잡한 다중 테이블 JOIN으로 역할/권한 추출
CRUD 작업: 생성, 수정, 삭제 쿼리
동적 SQL: <if> 태그로 조건부 업데이트

주요 특징:

LEFT JOIN 사용으로 데이터 누락 방지
중복 제거 (DISTINCT)
자동 증가 키 반환 (useGeneratedKeys="true")
조건부 필드 업데이트 (비밀번호 등)

다음 단계 옵션:

AuthCredential 클래스 완성 (Spring Security 연동)
Permissions enum 구현
AuthUserDetailService 완성
기본 데이터 입력 SQL 작성
UserMapper.xml - 사용자 관리를 위한 MyBatis SQL 매핑 파일
- UserMapper 인터페이스의 메서드와 1:1 매핑
- 각 <select>, <insert>, <update>, <delete> 태그의 id가 인터페이스의 메서드명과 동일
- namespace는 UserMapper 인터페이스의 전체 클래스명
-->
<mapper namespace="com.gltkorea.icebang.mapper.UserMapper">

    <!-- ========== ResultMap 정의 ========== -->

    <!-- 기본 사용자 정보 매핑 (USERS 테이블 컬럼만) -->
    <resultMap id="userResultMap" type="com.gltkorea.icebang.entity.Users">
        <id property="userId" column="user_id"/>              <!-- Primary Key 매핑 -->
        <result property="userName" column="user_name"/>       <!-- 사용자명 -->
        <result property="userEmail" column="user_email"/>     <!-- 이메일 (로그인 ID) -->
        <result property="userPassword" column="user_password"/><!-- 암호화된 비밀번호 -->
        <result property="userStatus" column="user_status"/>   <!-- 계정 상태 -->
        <result property="deptId" column="dept_id"/>           <!-- 부서 ID -->
        <result property="positionId" column="position_id"/>   <!-- 직급 ID -->
    </resultMap>

    <!-- 상세 정보 포함 매핑 (JOIN된 조직 정보 포함) -->
    <resultMap id="userWithDetailsResultMap" type="com.gltkorea.icebang.entity.Users">
        <!-- 기본 사용자 정보 -->
        <id property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="userEmail" column="user_email"/>
        <result property="userPassword" column="user_password"/>
        <result property="userStatus" column="user_status"/>
        <result property="deptId" column="dept_id"/>
        <result property="positionId" column="position_id"/>

        <!-- JOIN으로 가져온 조직 정보 -->
        <result property="deptName" column="dept_name"/>          <!-- 부서명 -->
        <result property="positionTitle" column="position_title"/><!-- 직급명 -->
        <result property="orgName" column="org_name"/>            <!-- 조직명 -->
    </resultMap>

    <!-- ========== 기본 조회 쿼리 ========== -->

    <!-- 사용자명으로 기본 정보 조회 -->
    <select id="findByUsername" parameterType="String" resultMap="userResultMap">
        SELECT
            user_id, user_name, user_email, user_password,
            user_status, dept_id, position_id
        FROM USERS
        WHERE user_name = #{username}
    </select>

    <!-- 이메일로 기본 정보 조회 (로그인 시 주로 사용) -->
    <select id="findByEmail" parameterType="String" resultMap="userResultMap">
        SELECT
            user_id, user_name, user_email, user_password,
            user_status, dept_id, position_id
        FROM USERS
        WHERE user_email = #{email}
    </select>

    <!-- 사용자 ID로 기본 정보 조회 -->
    <select id="findById" parameterType="Long" resultMap="userResultMap">
        SELECT
            user_id, user_name, user_email, user_password,
            user_status, dept_id, position_id
        FROM USERS
        WHERE user_id = #{userId}
    </select>

    <!-- ========== 상세 정보 조회 (JOIN 쿼리) ========== -->

    <!-- 사용자명으로 상세 정보 조회 (조직 정보 포함) -->
    <select id="findByUsernameWithDetails" parameterType="String" resultMap="userWithDetailsResultMap">
        SELECT
            u.user_id, u.user_name, u.user_email, u.user_password, u.user_status,
            u.dept_id, u.position_id,
            d.dept_name,                    -- 부서명
            p.position_title,               -- 직급명
            o.org_name                      -- 조직명
        FROM USERS u
                 LEFT JOIN DEPARTMENT d ON u.dept_id = d.dept_id      -- 부서 정보 조인
                 LEFT JOIN POSITION p ON u.position_id = p.position_id -- 직급 정보 조인
                 LEFT JOIN ORGANIZATION o ON d.org_id = o.org_id       -- 조직 정보 조인
        WHERE u.user_name = #{username}
    </select>

    <!-- 이메일로 상세 정보 조회 (조직 정보 포함) -->
    <select id="findByEmailWithDetails" parameterType="String" resultMap="userWithDetailsResultMap">
        SELECT
            u.user_id, u.user_name, u.user_email, u.user_password, u.user_status,
            u.dept_id, u.position_id,
            d.dept_name, p.position_title, o.org_name
        FROM USERS u
                 LEFT JOIN DEPARTMENT d ON u.dept_id = d.dept_id
                 LEFT JOIN POSITION p ON u.position_id = p.position_id
                 LEFT JOIN ORGANIZATION o ON d.org_id = o.org_id
        WHERE u.user_email = #{email}
    </select>

    <!-- 모든 사용자 목록 조회 (관리자용) -->
    <select id="findAllUsers" resultMap="userWithDetailsResultMap">
        SELECT
            u.user_id, u.user_name, u.user_email, u.user_status,
            u.dept_id, u.position_id,
            d.dept_name, p.position_title, o.org_name
        FROM USERS u
                 LEFT JOIN DEPARTMENT d ON u.dept_id = d.dept_id
                 LEFT JOIN POSITION p ON u.position_id = p.position_id
                 LEFT JOIN ORGANIZATION o ON d.org_id = o.org_id
        ORDER BY u.user_id  -- ID 순으로 정렬
    </select>

    <!-- ========== 권한 관련 조회 ========== -->

    <!-- 사용자의 역할 목록 조회 -->
    <select id="findRolesByUserId" parameterType="Long" resultType="String">
        SELECT r.role_name
        FROM USERS_ROLE ur
                 JOIN ROLE r ON ur.role_id = r.role_id  -- 역할 테이블과 조인
        WHERE ur.user_id = #{userId}
        ORDER BY r.role_name
    </select>

    <!-- 사용자의 권한 목록 조회 (역할을 통해 간접적으로) -->
    <select id="findPermissionsByUserId" parameterType="Long" resultType="String">
        SELECT DISTINCT p.resource  -- 중복 제거
        FROM USERS_ROLE ur
                 JOIN ROLE_PERMISSION rp ON ur.role_id = rp.role_id      -- 역할-권한 매핑
                 JOIN PERMISSION p ON rp.permission_id = p.permission_id -- 권한 정보
        WHERE ur.user_id = #{userId}
        ORDER BY p.resource
    </select>

    <!-- ========== 생성/수정/삭제 ========== -->

    <!-- 새 사용자 생성 -->
    <insert id="insertUser" parameterType="com.gltkorea.icebang.entity.Users"
            useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO USERS (
            user_name, user_email, user_password,
            user_status, dept_id, position_id
        ) VALUES (
                     #{userName}, #{userEmail}, #{userPassword},
                     #{userStatus}, #{deptId}, #{positionId}
                 )
    </insert>

    <!-- 사용자 정보 수정 -->
    <update id="updateUser" parameterType="com.gltkorea.icebang.entity.Users">
        UPDATE USERS
        SET
        user_name = #{userName},
        user_email = #{userEmail},
        <!-- 비밀번호는 null이 아닐 때만 업데이트 -->
        <if test="userPassword != null and userPassword != ''">
            user_password = #{userPassword},
        </if>
        user_status = #{userStatus},
        dept_id = #{deptId},
        position_id = #{positionId}
        WHERE user_id = #{userId}
    </update>

    <!-- 비밀번호만 수정 (보안상 별도 처리) -->
    <update id="updatePassword">
        UPDATE USERS
        SET user_password = #{newPassword}
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 상태만 변경 -->
    <update id="updateUserStatus">
        UPDATE USERS
        SET user_status = #{status}
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 삭제 -->
    <delete id="deleteUser" parameterType="Long">
        DELETE FROM USERS
        WHERE user_id = #{userId}
    </delete>

    <!-- ========== 검증 쿼리 ========== -->

    <!-- 이메일 중복 검사 -->
    <select id="existsByEmail" parameterType="String" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM USERS
        WHERE user_email = #{email}
    </select>

    <!-- 사용자명 중복 검사 -->
    <select id="existsByUsername" parameterType="String" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM USERS
        WHERE user_name = #{username}
    </select>

</mapper>